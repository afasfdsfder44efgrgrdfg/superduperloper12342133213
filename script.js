document.addEventListener("DOMContentLoaded", () => {
  const loginForm = document.getElementById("login-form");
  const registerForm = document.getElementById("register-form");
  const loginTab = document.getElementById("show-login");
  const registerTab = document.getElementById("show-register");

  let userData = JSON.parse(localStorage.getItem("userData")) || [];
  const ADMIN_WHITELIST_KEY = "628338db-a878-4d0d-a724-35a038981446";
  const OWNER_WHITELIST_KEY = "E2D3FB9B- E401-4AB5- 82D3-2F4EE178AC4";

  loginTab.addEventListener("click", () => {
    loginForm.classList.remove("hidden");
    registerForm.classList.add("hidden");
    loginTab.classList.add("active");
    registerTab.classList.remove("active");
  });

  registerTab.addEventListener("click", () => {
    registerForm.classList.remove("hidden");
    loginForm.classList.add("hidden");
    registerTab.classList.add("active");
    loginTab.classList.remove("active");
  });

  loginForm.addEventListener("submit", (e) => {
    e.preventDefault();
    const username = document.getElementById("login-username").value.trim();
    const password = document.getElementById("login-password").value.trim();
    const whitelistKey = document.getElementById("login-whitelist").value.trim();
    const errorDiv = document.getElementById("login-whitelist-error");

    if (password.length < 6) {
      errorDiv.textContent = "Password must be at least 6 characters long.";
      errorDiv.classList.remove("hidden");
      setTimeout(() => {
        errorDiv.classList.add("hidden");
      }, 3000);
      return;
    }

    const user = userData.find(u => u.username === username && u.key === whitelistKey && !u.blacklisted);
    if (user || whitelistKey === ADMIN_WHITELIST_KEY || whitelistKey === OWNER_WHITELIST_KEY) {
      localStorage.setItem("username", username);
      localStorage.setItem("password", password);
      localStorage.setItem("whitelistKey", whitelistKey);
      localStorage.setItem("isAdmin", whitelistKey === ADMIN_WHITELIST_KEY ? "true" : "false");
      localStorage.setItem("isOwner", whitelistKey === OWNER_WHITELIST_KEY ? "true" : "false");
      window.location.href = "dashboard.html";
    } else {
      errorDiv.textContent = "Invalid key, username mismatch, or key is blacklisted.";
      errorDiv.classList.remove("hidden");
      setTimeout(() => {
        errorDiv.classList.add("hidden");
      }, 3000);
    }
  });

  registerForm.addEventListener("submit", (e) => {
    e.preventDefault();
    const username = document.getElementById("register-username").value.trim();
    const password = document.getElementById("register-password").value.trim();
    const whitelistKey = document.getElementById("register-whitelist").value.trim();
    const errorDiv = document.getElementById("register-whitelist-error");

    if (password.length < 6) {
      errorDiv.textContent = "Password must be at least 6 characters long.";
      errorDiv.classList.remove("hidden");
      setTimeout(() => {
        errorDiv.classList.add("hidden");
      }, 3000);
      return;
    }

    // Check if the key exists in userData, is not blacklisted, and has no associated username
    const keyData = userData.find(u => u.key === whitelistKey && !u.blacklisted && !u.username);
    if (keyData) {
      // Update the key with the username
      userData = userData.map(u => u.key === whitelistKey ? { ...u, username } : u);
      localStorage.setItem("userData", JSON.stringify(userData));
      localStorage.setItem("username", username);
      localStorage.setItem("password", password);
      localStorage.setItem("whitelistKey", whitelistKey);
      localStorage.setItem("isAdmin", whitelistKey === ADMIN_WHITELIST_KEY ? "true" : "false");
      localStorage.setItem("isOwner", whitelistKey === OWNER_WHITELIST_KEY ? "true" : "false");
      alert("Registered successfully!");
      window.location.href = "dashboard.html";
    } else {
      errorDiv.textContent = "Invalid key or key already registered. Only keys generated by an owner are valid.";
      errorDiv.classList.remove("hidden");
      setTimeout(() => {
        errorDiv.classList.add("hidden");
      }, 3000);
    }
  });

  setInterval(() => {
    createDot();
  }, 100);

  function createDot() {
    const dot = document.createElement("div");
    dot.classList.add("dot");
    dot.style.left = `${Math.random() * 100}vw`;
    dot.style.top = `0px`;
    const size = `${Math.random() * 6 + 4}px`;
    dot.style.width = size;
    dot.style.height = size;
    dot.style.animationDuration = `${Math.random() * 2 + 2}s`;
    document.body.appendChild(dot);
    setTimeout(() => {
      dot.remove();
    }, 4000);
  }
});